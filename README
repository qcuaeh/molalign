<!-- -*- mode: markdown -*- -->

molalign
========
[![License: LGPL v3](https://img.shields.io/badge/License-LGPL_v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)
[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/qcuaeh/molalign.git/HEAD?labpath=molalign/tests)

**molalign** is a fortran code based on random rotations and pseudo local
minimizations of RMSD to reliably find solutions to the near-congruence
problem for atom clusters.

![graphical abstract](binder/abstract.png)

Building
--------

To build the program you will need a Linux computer with the GNU or Intel Fortran
compilers, LAPACK, and optionally, with Python 3 and F2PY.

1. Clone the repository and enter the *molalign* directory.
2. Make a copy of either *scripts/gnu.env* or *scripts/intel.env* as *build.env*, depending on your system.
3. Run `./scripts/build.sh` to build the executable.

After runnig the script the executable will be created inside the *build* directory.

Program options
---------------

-sort : Sort atoms by optimal assignment.  
-fast : Enable biasing and iterative convergence.  
-tol *ϵ* : Set biasing tolerance to *ϵ* (defaults to 0.35 Å).  
-test : Use the same pseudo random numbers on every run.  
-count *N* : Set the count convergence threshold to *N* (defaults to 10).  
-out xyz|mol2 : Set the output format to XYZ or Mol2 (defaults to XYZ).  
-rec *N* : Set the number of recorded solutions to *N* (defaults to 1).  
-trials *MAX* : Set the maximum number of trials to *MAX*.  
-scale *α* : Set biasing scale to *α* (defaults to 1000).  
-stdin : Read coordinates from standard input.  
-mass : Use mass weighted RMSD.  
-live : Show progress in real time.  
 
Basic usage
-----------

To align two molecules just run:

    ./build/molalign tests/r005/Co100.xyz

To align two molecules with optimal assigment run:

    ./build/molalign tests/r005/Co100.xyz -sort

by default a convergence threshold of 10 counts is used but a lower threshold
can be used to reduce the computation time at the expense of less reliable
results.

When reordering is requested performance can be improved by two to four orders of
magnitude by enabling biasing and iterationo with the `-fast` option. For example
to reorder and align two molecules applying biasing run:

    ./build/molalign tests/r005/Co100.xyz -sort -fast

A biasing tolerance of 0.35 Å is used by default, which is enough to account for
moderate distortions on the geometry, however if the maximum distortion is larger
than the tolerance then wrong results can be obtained:

    ./build/molalign tests/r02/Co100.xyz -sort -fast

Increasing the tolerance will fix the problem at the expense of a longer calculation:

    ./build/molalign tests/r02/Co100.xyz -sort -fast -tol 0.7

Tolerance must be chosen carefully because a value too small can lead to wrong
results while a value too large will not improve performance.

Advanced usage
--------------

Most of the options not covered in the basic usage are intended for testing purposes.

The option `-test` forces the generation of the same stream of random numbers on
every run in order to have reproducible results:

    ./build/molalign tests/r005/Co100.xyz 10 -sort -fast -test

The algorithm by default generates several possible reorderings, but only one is
printed by default. To print more than one solution use the `-rec` option:

    ./build/molalign tests/r005/Co100.xyz 10 -sort -fast -rec 10

To avoid too long computations the option `-trials` can be used:

    ./build/molalign tests/r005/Co100.xyz -sort -fast -trials 1000

which will stop the computation if the number of trials exceeds 1000.

To use mass weighted coordinates use the `-mass` option:

    ./build/molalign tests/r005/Co100.xyz -sort -fast -mass

Finally the options `-stdin`, `-out` and `-live` just control the source and the
destination of the input and results, and the way that progress is displayed.

Examples
--------

Notice that because the random number generator is initialized with a different
seed each time the output will not be exactly the same as in the examples (to
reproduce exactly the same output use the option `-test`):

To align two Co138 clusters printing up to 5 possible algnments run:

    ./build/molalign tests/r005/Co138.xyz -sort -fast -rec 5
 
The ouput shows that there are 3 degenerated solutions due to the symmetry of
the cluster:

     Map    Count    Steps     Total      Real       RMSD
    -----------------------------------------------------
       1       10     10.0      74.4      54.5     0.0506
       2       10      9.0      69.8      48.5     0.0506
       3       16     11.3      83.2      63.6     0.0506
       4        1      2.0       8.4       7.1     0.6652
       5        1      7.0      30.5       9.8     0.6716
    -----------------------------------------------------
    Found more than 5 mapping(s) in 81 random trial(s)
